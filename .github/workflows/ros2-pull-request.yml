name: ROS 2 Multi-Distribution CI

on:
  push:
    branches:
      - humble
  pull_request:
    branches:
      - humble

# Global variables
env:
  REQUIRED_LINES_COVERAGE: 60.0
  REQUIRED_FUNCTION_COVERAGE: 60.0

jobs:
  format-check:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-desktop
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y clang-format
      - name: Check for incorrect file extensions
        shell: bash
        run: |
          bash ./scripts/check_extensions.sh
      - name: Check formatting
        shell: bash
        run: |
          bash ./scripts/check_formatting.sh

  build-and-test-ubuntu:
    needs: format-check
    strategy:
      fail-fast: false
      matrix:
        ros_distro: [humble]
        arch: [amd64, arm64, arm32]
        include:
          - ros_distro: humble
            container_image: osrf/ros:humble-desktop
            ubuntu_version: ubuntu-22.04
            ubuntu_codename: jammy
    runs-on: ${{ matrix.ubuntu_version }}
    container:
      image: ${{ matrix.container_image }}
    env:
      ROS_DISTRO: ${{ matrix.ros_distro }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install build tools
        run: |
          apt-get update
          apt-get install -y python3-colcon-common-extensions python3-rosdep python3-vcstool git \
          libboost-all-dev libgmock-dev python3-pip gcc g++ lcov gcovr build-essential \
          ros-${{ matrix.ros_distro }}-ament-copyright ros-${{ matrix.ros_distro }}-ament-cmake

      - name: Update rosdep database
        run: rosdep update || true

      - name: Install dependencies
        run: |
          rosdep install --from-paths . --ignore-src -r -y

      - name: Build project with coverage flags
        shell: bash
        run: |
          . /opt/ros/${{ matrix.ros_distro }}/setup.bash
          export CXXFLAGS="--coverage -fprofile-arcs -ftest-coverage -g -O0"
          export CFLAGS="--coverage -fprofile-arcs -ftest-coverage -g -O0"
          export LDFLAGS="--coverage -lgcov"
          colcon build \
            --cmake-args \
              -DRTEST_BUILD_EXAMPLES=On \
              -DBUILD_TESTING=On \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage -g -O0" \
              -DCMAKE_EXE_LINKER_FLAGS="--coverage -lgcov" \
              -DCMAKE_SHARED_LINKER_FLAGS="--coverage -lgcov"

      - name: Run tests
        shell: bash
        run: |
          . /opt/ros/${{ matrix.ros_distro }}/setup.bash
          . install/setup.bash
          colcon test --event-handlers console_cohesion+
          colcon test-result

      - name: Upload test results
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu-${{ matrix.ros_distro }}-${{ matrix.arch }}
          path: build/rtest_examples/test_results

      - name: Verify test results
        shell: bash
        run: |
          . /opt/ros/${{ matrix.ros_distro }}/setup.bash
          test_results=$(colcon test-result --verbose | tee /dev/stderr)
          if echo "$test_results" | grep -q "0 errors, 0 failures"; then
            echo "[  PASSED  ] All tests passed with no errors and no failures."
            echo "TESTS_PASSED=true" >> $GITHUB_ENV
          else
            echo "[  FAILED  ] There were test errors or failures."
            echo "TESTS_PASSED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Generate coverage report for framework library
        shell: bash
        run: |
          bash ./scripts/generate_coverage.sh

      - name: Upload coverage reports
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: framework-coverage-report-${{ matrix.ros_distro }}-${{ matrix.arch }}
          path: coverage_artifacts
          if-no-files-found: warn

      - name: Upload HTML coverage report
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report-${{ matrix.ros_distro }}-${{ matrix.arch }}
          path: coverage_report_framework
          if-no-files-found: warn

      - name: Check test status
        if: always()
        run: |
          if [ "${TESTS_PASSED}" = "true" ]; then
            echo "✅ All tests passed successfully for ${{ matrix.ros_distro }}"
          else
            echo "❌ Tests failed or had errors for ${{ matrix.ros_distro }}"
            exit 1
          fi

      - name: Check coverage score meets thresholds (lines=${{ env.REQUIRED_LINES_COVERAGE }}%, functions=${{ env.REQUIRED_FUNCTION_COVERAGE }}%)
        shell: bash
        run: |
          bash ./scripts/check_coverage_thresholds.sh "${REQUIRED_LINES_COVERAGE:-0.0}" "${REQUIRED_FUNCTION_COVERAGE:-0.0}"

