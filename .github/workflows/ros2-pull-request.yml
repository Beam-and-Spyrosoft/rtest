name: ROS 2 Jazzy CI

on:
  push:
    branches:
      - main
      - jazzy
  pull_request:
    branches:
      - main
      - jazzy

# Global variables
env:
  REQUIRED_LINES_COVERAGE: 60.0
  REQUIRED_FUNCTION_COVERAGE: 60.0

jobs:
  format-check:
    runs-on: ubuntu-24.04
    container:
      image: osrf/ros:jazzy-desktop
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fix ROS 2 GPG key and repo (Ubuntu 24.04 / noble)
        run: |
          rm -f /etc/apt/sources.list.d/ros2*.list /usr/share/keyrings/ros2-*.gpg
          curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | \
            gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu noble main" \
            > /etc/apt/sources.list.d/ros2.list
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
      - name: Check for incorrect file extensions
        shell: bash
        run: |
          bash ./scripts/check_extensions.sh
      - name: Check formatting
        shell: bash
        run: |
          bash ./scripts/check_formatting.sh

  build-and-test-ubuntu:
    needs: format-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        arch: [amd64, arm64, arm32]
    runs-on: ${{ matrix.os }}
    container:
      image: osrf/ros:jazzy-desktop
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fix ROS 2 GPG key and repo (Ubuntu 24.04 / noble)
        run: |
          rm -f /etc/apt/sources.list.d/ros2*.list /usr/share/keyrings/ros2-*.gpg
          curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | \
            gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu noble main" \
            > /etc/apt/sources.list.d/ros2.list
      - name: Install build tools
        run: |
          apt-get update
          apt-get install -y python3-colcon-common-extensions python3-rosdep python3-vcstool git \
          libboost-all-dev libgmock-dev python3-pip lcov gcovr ros-jazzy-ament-copyright

      - name: Update rosdep database
        run: rosdep update || true

      - name: Install dependencies
        run: |
          rosdep install --from-paths . --ignore-src -r -y

      - name: Build project with coverage flags
        shell: bash
        run: |
          . /opt/ros/jazzy/setup.bash
          colcon build --cmake-args -DBUILD_TESTING=On -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" -DCMAKE_EXE_LINKER_FLAGS="-lgcov --coverage"

      - name: Run tests
        shell: bash
        run: |
          . /opt/ros/jazzy/setup.bash
          . install/setup.bash
          colcon test --event-handlers console_cohesion+
          colcon test-result

      - name: Upload test results
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu-${{ matrix.arch }}
          path: build/rtest_examples/test_results

      - name: Verify test results
        shell: bash
        run: |
          . /opt/ros/jazzy/setup.bash
          test_results=$(colcon test-result --verbose | tee /dev/stderr)
          if echo "$test_results" | grep -q "0 errors, 0 failures"; then
            echo "[  PASSED  ] All tests passed with no errors and no failures."
            echo "TESTS_PASSED=true" >> $GITHUB_ENV
          else
            echo "[  FAILED  ] There were test errors or failures."
            echo "TESTS_PASSED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Generate coverage report for framework library
        shell: bash
        run: |
          bash ./scripts/generate_coverage.sh

      - name: Upload coverage reports
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: framework-coverage-report-${{ matrix.arch }}
          path: coverage_artifacts
          if-no-files-found: warn

      - name: Upload HTML coverage report
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report-${{ matrix.arch }}
          path: coverage_report_framework
          if-no-files-found: warn

      - name: Check test status
        if: always()
        run: |
          if [ "${TESTS_PASSED}" = "true" ]; then
            echo "✅ All tests passed successfully"
          else
            echo "❌ Tests failed or had errors"
            exit 1
          fi

      - name: Check coverage score meets thresholds (lines=${{ env.REQUIRED_LINES_COVERAGE }}%, functions=${{ env.REQUIRED_FUNCTION_COVERAGE }}%)
        shell: bash
        run: |
          bash ./scripts/check_coverage_thresholds.sh "${REQUIRED_LINES_COVERAGE:-0.0}" "${REQUIRED_FUNCTION_COVERAGE:-0.0}"

